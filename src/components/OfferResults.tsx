'use client';

import { useAppContext } from '@/context/AppContext';

interface OfferResultsProps {
  showToast: (
    type: 'success' | 'error' | 'warning' | 'info',
    title: string,
    message: string
  ) => void;
}

export const OfferResults = ({ showToast }: OfferResultsProps) => {
  const { state, saveOffer, setCurrentOffer } = useAppContext();

  if (!state.currentOffer) return null;
  const offer = state.currentOffer;

  const handleSaveOffer = () => {
    if (state.currentOffer) {
      saveOffer(state.currentOffer);
      showToast('success', 'Offer Saved', 'Your offer was saved successfully!');
    }
  };

  const handleGenerateNew = () => {
    setCurrentOffer(null);
  };

  const handleDownloadOffer = () => {
    if (!state.currentOffer) return;

    const offerData = state.currentOffer;

    const finalValue =
      offerData.offerType === 'creative'
        ? offerData.monthlyPayment
        : offerData.offerAmount;

    const offerSheet = `
PROFESSIONAL REAL ESTATE OFFER SHEET
Generated by Low Ball AI Bot

PROPERTY INFORMATION
==========================================
Property Address: ${offerData.address}
Offer Type: ${offerData.offerType === 'cash' ? 'Cash Offer' : 'Creative Offer'}
Generated on: ${new Date().toLocaleDateString()}

FINANCIAL BREAKDOWN
==========================================
ARV (After Repair Value): $${offerData.arv.toLocaleString()}
Estimated Repairs: $${offerData.repairs.toLocaleString()}

FINAL OFFER: $${finalValue?.toLocaleString()}

ADDITIONAL NOTES
==========================================
${offerData.notes || 'No additional notes provided.'}

This offer was generated using professional real estate investment calculations and market analysis.
    `.trim();

    const blob = new Blob([offerSheet], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `offer-${offerData.address.replace(/[^a-zA-Z0-9]/g, '-')}-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);

    showToast('success', 'Offer Downloaded', 'The offer has been downloaded!');
  };

  const handleShareOffer = () => {
    if (!state.currentOffer) return;

    const offerData = state.currentOffer;
    const finalValue =
      offerData.offerType === 'creative'
        ? offerData.monthlyPayment
        : offerData.offerAmount;

    const shareText = `🏠 Professional Real Estate Offer Generated!\n\nProperty: ${
      offerData.address
    }\nOffer Amount: $${finalValue?.toLocaleString()}\nOffer Type: ${
      offerData.offerType === 'cash' ? 'Cash' : 'Creative'
    }\n\nGenerated by Low Ball AI Bot - Advanced Real Estate Investment Calculator`;

    if (navigator.share) {
      navigator.share({
        title: 'Real Estate Investment Offer',
        text: shareText,
        url: window.location.href,
      });
    } else {
      navigator.clipboard.writeText(shareText).then(() => {
        showToast('info', 'Offer Copied', 'Offer details copied to clipboard!');
      });
    }
  };

  // --- UI ---
  const finalDisplayedAmount =
    offer.offerType === 'creative' ? offer.monthlyPayment : offer.offerAmount;

  return (
    <div className="content-container">
      <div id="offer-results" className="offer-results-section">
        <div className="offer-results-content">
          {/* Title */}
          <h2 className="offer-results-title">
            <span className="target-icon">🎯</span>
            Your Recommended Offer
          </h2>

          {/* Big Offer Number */}
          <div className="offer-amount">
            ${finalDisplayedAmount?.toLocaleString()}
          </div>

          {/* Offer Type */}
          <div className="offer-type-display">
            <span className="offer-type-icon">
              {offer.offerType === 'cash' ? '💵' : '🎨'}
            </span>
            {offer.offerType === 'cash' ? 'Cash Offer' : 'Creative Offer'}
          </div>

          {/* Breakdown */}
          {offer.offerType === 'cash' && (
            <div className="offer-breakdown">
              <h3 className="breakdown-title">Detailed Calculation Breakdown</h3>
              <div className="breakdown-row">
                <div className="breakdown-item">
                  <span className="breakdown-label">Property ARV:</span>
                  <span className="breakdown-value">
                    ${offer.arv.toLocaleString()}
                  </span>
                </div>
                <div className="breakdown-item">
                  <span className="breakdown-label">Repairs:</span>
                  <span className="breakdown-value">
                    ${offer.repairs.toLocaleString()}
                  </span>
                </div>
              </div>
              <div className="final-offer-section">
                <div className="final-offer-item">
                  <span className="final-offer-label">Final Offer:</span>
                  <span className="final-offer-value">
                    ${offer.offerAmount.toLocaleString()}
                  </span>
                </div>
              </div>
            </div>
          )}

          {offer.offerType === 'creative' && (
            <div className="offer-breakdown">
              <h3 className="breakdown-title">Creative Offer Breakdown</h3>
              <div className="breakdown-row">
                <div className="breakdown-item">
                  <span className="breakdown-label">As-Is Value:</span>
                  <span className="breakdown-value">
                    ${offer.asIsValue?.toLocaleString()}
                  </span>
                </div>
                <div className="breakdown-item">
                  <span className="breakdown-label">Downpayment:</span>
                  <span className="breakdown-value">
                    ${offer.downPayment?.toLocaleString()}
                  </span>
                </div>
              </div>
              <div className="breakdown-row">
                <div className="breakdown-item">
                  <span className="breakdown-label">Price:</span>
                  <span className="breakdown-value">
                    ${offer.price?.toLocaleString()}
                  </span>
                </div>
                <div className="breakdown-item">
                  <span className="breakdown-label">Term Length:</span>
                  <span className="breakdown-value">
                    {offer.longLengthInMonths} months
                  </span>
                </div>
              </div>
              <div className="final-offer-section">
                <div className="final-offer-item">
                  <span className="final-offer-label">Final Offer (Monthly):</span>
                  <span className="final-offer-value">
                    ${offer.monthlyPayment?.toLocaleString()}
                  </span>
                </div>
              </div>
            </div>
          )}

          {/* Actions */}
          <div className="offer-actions">
            <button
              className="action-btn save"
              onClick={handleSaveOffer}
              type="button"
            >
              <span className="btn-icon">💾</span>
              Save Offer
            </button>
            <button
              className="action-btn generate"
              onClick={handleGenerateNew}
              type="button"
            >
              <span className="btn-icon">🔄</span>
              Generate New
            </button>
            <button
              className="action-btn download hidden"
              onClick={handleDownloadOffer}
              type="button"
            >
              <span className="btn-icon">📥</span>
              Download TXT
            </button>
            <button
              className="action-btn share hidden"
              onClick={handleShareOffer}
              type="button"
            >
              <span className="btn-icon">🔗</span>
              Share Offer
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};
